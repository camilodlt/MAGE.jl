---
engine: julia
---

# similar {#sec-doc}
    

::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
similar(array, [element_type=eltype(array)], [dims=size(array)])

```

Create an uninitialized mutable array with the given element type and size, based upon the given source array. The second and third arguments are both optional, defaulting to the given array's `eltype` and `size`. The dimensions may be specified either as a single tuple argument or as a series of integer arguments.
 
Custom AbstractArray subtypes may choose which specific array type is best-suited to return for the given element type and dimensionality. If they do not specialize this method, the default is an `Array{element_type}(undef, dims...)`.
 
For example, `similar(1:10, 1, 4)` returns an uninitialized `Array{Int,2}` since ranges are neither mutable nor support 2 dimensions:
 

```{julia-repl}
#| eval: false
julia> similar(1:10, 1, 4)
1×4 Matrix{Int64}:
 4419743872  4374413872  4419743888  0

```

Conversely, `similar(trues(10,10), 2)` returns an uninitialized `BitVector` with two elements since `BitArray`s are both mutable and can support 1-dimensional arrays:
 

```{julia-repl}
#| eval: false
julia> similar(trues(10,10), 2)
2-element BitVector:
 0
 0

```

Since `BitArray`s can only store elements of type [`Bool`](@ref), however, if you request a different element type it will create a regular `Array` instead:
 

```{julia-repl}
#| eval: false
julia> similar(falses(10), Float64, 2, 4)
2×4 Matrix{Float64}:
 2.18425e-314  2.18425e-314  2.18425e-314  2.18425e-314
 2.18425e-314  2.18425e-314  2.18425e-314  2.18425e-314

```

See also: [`undef`](@ref), [`isassigned`](@ref).
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
similar(storagetype, axes)

```

Create an uninitialized mutable array analogous to that specified by `storagetype`, but with `axes` specified by the last argument.
 
**Examples**:
 

```{julia}
#| eval: false
similar(Array{Int}, axes(A))

```

creates an array that "acts like" an `Array{Int}` (and might indeed be backed by one), but which is indexed identically to `A`. If `A` has conventional indexing, this will be identical to `Array{Int}(undef, size(A))`, but if `A` has unconventional indexing then the indices of the result will match `A`.
 

```{julia}
#| eval: false
similar(BitArray, (axes(A, 2),))

```

would create a 1-dimensional logical array whose indices match those of the columns of `A`.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
similar(A::AbstractSparseMatrixCSC{Tv,Ti}, [::Type{TvNew}, ::Type{TiNew}, m::Integer, n::Integer]) where {Tv,Ti}

```

Create an uninitialized mutable array with the given element type, index type, and size, based upon the given source `SparseMatrixCSC`. The new sparse matrix maintains the structure of the original sparse matrix, except in the case where dimensions of the output matrix are different from the output.
 
The output matrix has zeros in the same locations as the input, but uninitialized values for the nonzero locations.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
similar(df::AbstractDataFrame, rows::Integer=nrow(df))

```

Create a new `DataFrame` with the same column names and column element types as `df`. An optional second argument can be provided to request a number of rows that is different than the number of rows present in `df`.
 
Metadata: this function preserves table-level and column-level `:note`-style metadata.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
Base.similar(lazy_inputs::SharedInput)

```



:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
similar(static_array)
similar(static_array, T)
similar(array, ::Size)
similar(array, T, ::Size)

```

Constructs and returns a mutable but statically-sized array (i.e. a `StaticArray`). If the input `array` is not a `StaticArray`, then the `Size` is required to determine the output size (or else a dynamically sized array will be returned).
 


:::
    

