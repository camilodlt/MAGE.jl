---
engine: julia
---

# size {#sec-doc}
    

::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
size(A::AbstractArray, [dim])

```

Return a tuple containing the dimensions of `A`. Optionally you can specify a dimension to just get the length of that dimension.
 
Note that `size` may not be defined for arrays with non-standard indices, in which case [`axes`](@ref) may be useful. See the manual chapter on [arrays with custom indices](@ref man-custom-indices).
 
See also: [`length`](@ref), [`ndims`](@ref), [`eachindex`](@ref), [`sizeof`](@ref).
 

### Examples
    

```{julia}
#| eval: false
julia> A = fill(1, (2,3,4));

julia> size(A)
(2, 3, 4)

julia> size(A, 2)
3

```



:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
size(cb::CircularBuffer)

```

Return a tuple with the size of the buffer.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
size(df::AbstractDataFrame[, dim])

```

Return a tuple containing the number of rows and columns of `df`. Optionally a dimension `dim` can be specified, where `1` corresponds to rows and `2` corresponds to columns.
 
See also: [`nrow`](@ref), [`ncol`](@ref)
 

### Examples
    

```{julia}
#| eval: false
julia> df = DataFrame(a=1:3, b='a':'c');

julia> size(df)
(3, 2)

julia> size(df, 1)
3

```



:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
size(dfr::DataFrameRow[, dim])

```

Return a 1-tuple containing the number of elements of `dfr`. If an optional dimension `dim` is specified, it must be `1`, and the number of elements is returned directly as a number.
 
See also: [`length`](@ref)
 

### Examples
    

```{julia}
#| eval: false
julia> dfr = DataFrame(a=1:3, b='a':'c')[1, :]
DataFrameRow
 Row │ a      b
     │ Int64  Char
─────┼─────────────
   1 │     1  a

julia> size(dfr)
(2,)

julia> size(dfr, 1)
2

```



:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
size(library::AbstractLibrary)

```

Returns the size of the internal library (that holds FunctionWrappers).
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
size(ml::AbstractMetaLibrary)

```

Returns the number of libraries in the MetaLibrary.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
size(shared_inputs::AbstractGenomeInputs)

```

Returns the number of inputs in the internal vector.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
size(genome::AbstractGenome)

```

Returns the size of the internal chromosome (a vector of nodes) 
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
size(genome::AbstractMetaGenome)

```

Returns the size of the internal chromosome (a vector of nodes) 
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
size(p::Plan, [dim])

```

Return the size of the input of a plan `p`, optionally at a specified dimenion `dim`.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
size(::AbstractPolynomial, [i])

```

Returns the size of the polynomials coefficients, along axis `i` if provided.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
size(g, i)

```

Return the number of vertices in `g` if `i`=1 or `i`=2, or `1` otherwise.
 

### Examples
    

```{julia}
#| eval: false
julia> using Graphs

julia> g = cycle_graph(4);

julia> size(g, 1)
4

julia> size(g, 2)
4

julia> size(g, 3)
1

```



:::
    

