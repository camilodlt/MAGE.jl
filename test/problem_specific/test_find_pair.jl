using Combinatorics
using UTCGP.listnumber_vectuples: sum_tuples_in_vector
using UTCGP.listinteger_iscond: is_eq_to
using UTCGP.integer_find: index_of_first_true
using UTCGP.listgeneric_subset: subset_list_of_tuples

train_data = [
    [[[5, 7], 12], [5, 7]],
    [[[2500, 6352], 8852], [2500, 6352]],
    [[[-14, 5], -9], [-14, 5]],
    [[[40, -19], 21], [40, -19]],
    [[[-4, 4], 0], [-4, 4]],
    [[[-5, -20], -25], [-5, -20]],
    [[[-7831, -3001], -10832], [-7831, -3001]],
    [[[10000, -10000], 0], [10000, -10000]],
    [[[8310, -8320], -10], [8310, -8320]],
    [[[0, 1234], 1234], [0, 1234]],
    [[[1, 3, 5], 4], [1, 3]],
    [[[1, 3, 5], 6], [1, 5]],
    [[[1, 3, 5], 8], [3, 5]],
    [[[-1, 0, 1], 0], [-1, 1]],
    [[[-1, 0, 1], 1], [0, 1]],
    [[[-1, 0, 1], -1], [-1, 0]],
    [[[14, -35, 78], -21], [14, -35]],
    [[[14, -35, 78], 92], [14, 78]],
    [[[14, -35, 78], 43], [-35, 78]],
    [[[9492, -3791, -7317], 5701], [9492, -3791]],
    [[[9492, -3791, -7317], 2175], [9492, -7317]],
    [[[9492, -3791, -7317], -11108], [-3791, -7317]],
    [[[237, 410, -777], 647], [237, 410]],
    [[[237, 410, -777], -540], [237, -777]],
    [[[237, 410, -777], -367], [410, -777]],
    [[[-5552, -4771, 6600, -7403], -803], [6600, -7403]],
    [[[-5821, -3557, 9945, 2076, 466, -8534], -3091], [-3557, 466]],
    [[[-1420, 8856, -8223, 8192, 2347, 3712, -5308, -5055], 633], [8856, -8223]],
    [[[-5984, -6015, -9348, 5203], -15363], [-6015, -9348]],
    [[[-522, -5989, 4277, 7722, -2274], 11999], [4277, 7722]],
    [[[-9853, -9716, -1961, -4618], -14471], [-9853, -4618]],
    [
        [[1788, -3044, 7598, -5735, 9138, 6758, 373, 1985, 194, 2277, -1402], -3750],
        [-5735, 1985],
    ],
    [
        [[-2879, -868, -3795, 7809, -5543, -6463, 6997, 9507, 4164, -297, -3285], 16504],
        [6997, 9507],
    ],
    [[[6716, 4026, 3871, 8199, -7315], -3289], [4026, -7315]],
    [[[5473, -1041, -7712, 5571, 8658], 946], [-7712, 8658]],
    [[[5492, -7081, 1399, 5951, -3091], -1692], [1399, -3091]],
    [[[4036, 8240, -3668, 3779, -930], 12276], [4036, 8240]],
    [[[-3209, 538, -3606, -9, -5007, 9960, 4619, 7567, 3295, 2548], 8105], [538, 7567]],
    [
        [
            [
                1,
                -4174,
                8788,
                9561,
                -3651,
                -1753,
                7154,
                -4569,
                -696,
                6125,
                -716,
                -7173,
                -7679,
                -2704,
                -3000,
                8074,
                1618,
                -4959,
                8332,
                6482,
            ],
            3373,
        ],
        [-4959, 8332],
    ],
    [[[-5779, -1891, 679, -216], -1212], [-1891, 679]],
    [[[-9814, -4581, 3449, 4733], -1132], [-4581, 3449]],
    [
        [
            [
                -9461,
                3842,
                1092,
                3393,
                -4296,
                7826,
                2975,
                -8963,
                -9398,
                7541,
                -9755,
                -485,
                -9478,
                -9380,
                -9925,
                -7380,
                5382,
                -6675,
            ],
            -1321,
        ],
        [-4296, 2975],
    ],
    [
        [
            [
                6639,
                -2253,
                -1550,
                -4959,
                4945,
                6430,
                -4381,
                9098,
                -5884,
                -8705,
                6035,
                663,
                -2005,
                -5328,
                1426,
                6309,
                -2965,
                6481,
                8258,
            ],
            12674,
        ],
        [6639, 6035],
    ],
    [[[-1211, 9783, -8055, 6545, -5575], -1510], [-8055, 6545]],
    [[[-8317, -3604, 4804, 2172, 2333], -1271], [-3604, 2333]],
    [[[-7097, 8738, -4457], 1641], [-7097, 8738]],
    [
        [
            [
                -2733,
                2677,
                9422,
                -7406,
                7481,
                -4654,
                211,
                5068,
                742,
                6085,
                -5952,
                -4911,
                6629,
                2797,
                -5498,
                -7707,
                2911,
                -5104,
                3309,
            ],
            4318,
        ],
        [9422, -5104],
    ],
    [[[-7091, -4615, -1147, -7478], -14569], [-7091, -7478]],
    [[[9728, -819, 5479, -7634], 2094], [9728, -7634]],
    [
        [
            [
                9965,
                -5398,
                -5623,
                -2037,
                4756,
                -1489,
                -1773,
                6390,
                -5920,
                -6567,
                1465,
                -9951,
                2444,
                -790,
                -9177,
                2361,
            ],
            -7693,
        ],
        [-1773, -5920],
    ],
]

using UTCGP.listtuple_combinatorics: vector_of_combinations

function algo_find_pair(x, y)
    vec, wanted = x
    # combinations
    all_comb = vector_of_combinations(vec)
    # sums combinations
    sums = sum_tuples_in_vector(all_comb)

    # eq vec to number
    eq_per_candidate = is_eq_to(sums, wanted)
    first_true = index_of_first_true(eq_per_candidate)
    # index at 
    pred = subset_list_of_tuples(all_comb, first_true)
    return pred == y

end

@testset "find pair" begin
    for (x, y) in train_data
        @test begin
            algo_find_pair(x, y)
        end
    end
end
