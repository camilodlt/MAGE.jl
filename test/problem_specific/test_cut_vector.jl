using UTCGP.listnumber_recursive: recsum
using UTCGP.listgeneric_basic: reverse_list
using UTCGP.listnumber_arithmetic: subtract_vector
using UTCGP.listnumber_algebraic: abs_vector
using UTCGP.number_reduce: reduce_argmin
using UTCGP.list_generic_subset: pick_until_inclusive_generic, pick_from_exclusive_generic

function cut_vector_algo(x, y)
    y = [Int.(sub) for sub in y]
    x = Int.(x)
    # count left to right
    rs = recsum(x)
    # count r to l
    rev = reverse_list(x)
    rs_rev = recsum(rev)
    rs_rev_rev = reverse_list(rs_rev)
    # lag by one
    rs_rev_rev_lag1 = subtract_vector(rs_rev_rev, x)

    # calc possibilities
    possible_losses = subtract_vector(rs, rs_rev_rev_lag1)
    abs_possible_losses = abs_vector(possible_losses)
    cut_point = reduce_argmin(abs_possible_losses) # inclusive to the left
    # @bp
    p1 = pick_until_inclusive_generic(x, cut_point)
    p2 = pick_from_exclusive_generic(x, cut_point)
    return (p1 == y[1] && p2 == y[2])
end
@testset "cut vector" begin
    xs = [
        [0],
        [10],
        [100],
        [1000],
        [10000],
        [2, 129],
        [0, 40],
        [9999, 74],
        [9879, 9950],
        [9225, 9994],
        [954, 987],
        [
            8181,
            6412,
            4846,
            2803,
            4140,
            3650,
            8009,
            682,
            2970,
            1854,
            4558,
            3489,
            8303,
            4079,
            1357,
            5625,
            5520,
            781,
        ],
        [
            6747,
            5497,
            6429,
            9868,
            9855,
            9670,
            5595,
            38,
            9683,
            8668,
            1250,
            6588,
            7565,
            4328,
            2305,
            2391,
        ],
        [
            4211,
            2086,
            2933,
            5073,
            9061,
            8093,
            8947,
            8680,
            1553,
            3438,
            7094,
            3949,
            6006,
            9688,
            2239,
            7082,
            9756,
            9309,
            8209,
            3298,
        ],
        [5332],
        [3546, 2053],
        [1403, 5375, 4942, 4990, 9912, 843],
        [5270, 49, 7871, 8499, 1507, 1689, 7815, 5833, 4429],
        [5498, 8085],
        [4467],
        [
            8586,
            9383,
            7688,
            5506,
            2555,
            8506,
            7838,
            8783,
            8842,
            6238,
            4058,
            3243,
            4537,
            7413,
            3757,
            5644,
            7959,
            9715,
            8622,
        ],
        [2126],
        [
            1708,
            5916,
            399,
            8916,
            2051,
            4233,
            3370,
            1909,
            4194,
            1188,
            3412,
            526,
            6747,
            4904,
            1625,
            3879,
            3613,
        ],
        [5080, 4600, 4570],
        [9819, 1385, 6597, 424, 7489, 8132, 7741, 620, 7026, 3825, 6413],
        [700, 4445, 9908, 5282, 7100, 892, 9270],
        [4563, 8830, 5836],
        [3916, 6130, 1433],
        [5203, 262, 1974, 2712, 5766],
        [3515],
    ]

    ys = [
        [[0], []],
        [[10], []],
        [[100], []],
        [[1000], []],
        [[10000], []],
        [[2], [129]],
        [[0], [40]],
        [[9999], [74]],
        [[9879], [9950]],
        [[9225], [9994]],
        [[954], [987]],
        [
            [8181, 6412, 4846, 2803, 4140, 3650, 8009, 682],
            [2970, 1854, 4558, 3489, 8303, 4079, 1357, 5625, 5520, 781],
        ],
        [
            [6747, 5497, 6429, 9868, 9855, 9670],
            [5595, 38, 9683, 8668, 1250, 6588, 7565, 4328, 2305, 2391],
        ],
        [
            [4211, 2086, 2933, 5073, 9061, 8093, 8947, 8680, 1553, 3438, 7094],
            [3949, 6006, 9688, 2239, 7082, 9756, 9309, 8209, 3298],
        ],
        [[5332], []],
        [[3546], [2053]],
        [[1403, 5375, 4942], [4990, 9912, 843]],
        [[5270, 49, 7871, 8499], [1507, 1689, 7815, 5833, 4429]],
        [[5498], [8085]],
        [[4467], []],
        [
            [8586, 9383, 7688, 5506, 2555, 8506, 7838, 8783, 8842],
            [6238, 4058, 3243, 4537, 7413, 3757, 5644, 7959, 9715, 8622],
        ],
        [[2126], []],
        [
            [1708, 5916, 399, 8916, 2051, 4233, 3370, 1909],
            [4194, 1188, 3412, 526, 6747, 4904, 1625, 3879, 3613],
        ],
        [[5080], [4600, 4570]],
        [[9819, 1385, 6597, 424, 7489], [8132, 7741, 620, 7026, 3825, 6413]],
        [[700, 4445, 9908, 5282], [7100, 892, 9270]],
        [[4563, 8830], [5836]],
        [[3916], [6130, 1433]],
        [[5203, 262, 1974], [2712, 5766]],
        [[3515], []],
    ]

    for (x, y) in zip(xs, ys)
        @test begin
            cut_vector_algo(x, y)
        end
    end

end
