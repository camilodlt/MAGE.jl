---
engine: julia
---

# iterate {#sec-doc}
    

::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
iterate(iter [, state]) -> Union{Nothing, Tuple{Any, Any}}

```

Advance the iterator to obtain the next element. If no elements remain, `nothing` should be returned. Otherwise, a 2-tuple of the next element and the new iteration state should be returned.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
iterate(s::AbstractString, i::Integer) -> Union{Tuple{<:AbstractChar, Int}, Nothing}

```

Return a tuple of the character in `s` at index `i` with the index of the start of the following character in `s`. This is the key method that allows strings to be iterated, yielding a sequences of characters. If `i` is out of bounds in `s` then a bounds error is raised. The `iterate` function, as part of the iteration protocol may assume that `i` is the start of a character in `s`.
 
See also [`getindex`](@ref), [`checkbounds`](@ref).
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    

Iterates over the internal node elements. 
 
It iterates over the node_meterial vector.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    

Iterates the internal library.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    

Iterates over all libraries in the MetaLibrary
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    

Iterates over the inputs.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    

Iterates the internal chromosome (a vector of nodes) .
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    

Iterates the internal chromosome (a vector of nodes) .
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
Base.iterate(pool::QueuePool[, state])

```

Iterates over the completed Tasks, grabbing the next one available and ending when the pool has been `close`ed.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
Base.iterate(pool::LoggedQueuePool[, state])

```

Iterates over the completed Tasks, grabbing the next one available and ending when the pool has been `close`ed.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
Base.iterate(t::BFSIterator)

```

First iteration to visit vertices in a graph using breadth-first search.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
Base.iterate(t::BFSIterator, state::VertexIteratorState)

```

Iterator to visit vertices in a graph using breadth-first search.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
Base.iterate(t::DFSIterator)

```

First iteration to visit vertices in a graph using depth-first search.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
Base.iterate(t::DFSIterator, state::VertexIteratorState)

```

Iterator to visit vertices in a graph using depth-first search.
 


:::
    

