---
engine: julia
---

# length {#sec-doc}
    

::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
length(collection) -> Integer

```

Return the number of elements in the collection.
 
Use [`lastindex`](@ref) to get the last valid index of an indexable collection.
 
See also: [`size`](@ref), [`ndims`](@ref), [`eachindex`](@ref).
 

### Examples
    

```{julia}
#| eval: false
julia> length(1:5)
5

julia> length([1, 2, 3, 4])
4

julia> length([1 2; 3 4])
4

```



:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
length(A::AbstractArray)

```

Return the number of elements in the array, defaults to `prod(size(A))`.
 

### Examples
    

```{julia}
#| eval: false
julia> length([1, 2, 3, 4])
4

julia> length([1 2; 3 4])
4

```



:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
length(s::AbstractString) -> Int
length(s::AbstractString, i::Integer, j::Integer) -> Int

```

Return the number of characters in string `s` from indices `i` through `j`.
 
This is computed as the number of code unit indices from `i` to `j` which are valid character indices. With only a single string argument, this computes the number of characters in the entire string. With `i` and `j` arguments it computes the number of indices between `i` and `j` inclusive that are valid indices in the string `s`. In addition to in-bounds values, `i` may take the out-of-bounds value `ncodeunits(s) + 1` and `j` may take the out-of-bounds value `0`.
 
::: {.callout-warning title="note: Note"}

The time complexity of this operation is linear in general. That is, it will take the time proportional to the number of bytes or characters in the string because it counts the value on the fly. This is in contrast to the method for arrays, which is a constant-time operation.


:::

See also [`isvalid`](@ref), [`ncodeunits`](@ref), [`lastindex`](@ref), [`thisind`](@ref), [`nextind`](@ref), [`prevind`](@ref).
 

### Examples
    

```{julia}
#| eval: false
julia> length("jμΛIα")
5

```



:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
length(h::BinaryHeap)

```

Returns the number of elements in heap `h`.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
length(cb::CircularBuffer)

```

Return the number of elements currently in the buffer.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
length(dfr::DataFrameRow)

```

Return the number of elements of `dfr`.
 
See also: [`size`](@ref)
 

### Examples
    

```{julia}
#| eval: false
julia> dfr = DataFrame(a=1:3, b='a':'c')[1, :]
DataFrameRow
 Row │ a      b
     │ Int64  Char
─────┼─────────────
   1 │     1  a

julia> length(dfr)
2

```



:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
length(library::AbstractLibrary)

```

Returns the size of the internal library (that holds FunctionWrappers).
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
length(ml::AbstractMetaLibrary)

```

Returns the number of libraries in the MetaLibrary.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
length(shared_inputs::AbstractGenomeInputs)

```

Returns the number of inputs in the internal vector.
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
length(genome::AbstractGenome)

```

Returns the size of the internal chromosome (a vector of nodes) 
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
length(genome::AbstractMetaGenome)

```

Returns the size of the internal chromosome (a vector of nodes) 
 


:::
    

 --- 
 
::: {.callout-note appearance="simple" title="docblock" collapse=false}    


```{julia}
#| eval: false
length(::AbstractPolynomial)

```

The length of the polynomial.
 


:::
    

